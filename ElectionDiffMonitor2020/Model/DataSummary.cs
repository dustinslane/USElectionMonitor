// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ElectionDiffMonitor2020.Model;
//
//    var dataSummary = DataSummary.FromJson(jsonString);

namespace ElectionDiffMonitor2020.Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class DataSummary
    {
        [J("timestamp")] public DateTimeOffset Timestamp { get; set; }                           
        [J("test")]      public bool Test { get; set; }                                          
        [J("results")]   public Dictionary<string, List<DataSummaryResult>> Results { get; set; }
    }

    public partial class DataSummaryResult
    {
        [J("raceID")]  public string RaceId { get; set; }  
        [J("summary")] public Summary Summary { get; set; }
    }

    public partial class Summary
    {
        [J("ruid")]                  public string Ruid { get; set; }                 
        [J("level")]                 public Level Level { get; set; }                 
        [J("precinctsTotal")]        public long PrecinctsTotal { get; set; }         
        [J("precinctsReporting")]    public long PrecinctsReporting { get; set; }     
        [J("precinctsReportingPct")] public double PrecinctsReportingPct { get; set; }
        [J("results")]               public List<SummaryResult> Results { get; set; } 
        [J("eevp")]                  public long Eevp { get; set; }                   
        [J("electTotal")]            public long ElectTotal { get; set; }             
    }

    public partial class SummaryResult
    {
        [J("candidateID")]                          public string CandidateId { get; set; }
        [J("voteCount")]                            public long VoteCount { get; set; }    
        [J("votePct")]                              public double VotePct { get; set; }    
        [J("electWon")]                             public long ElectWon { get; set; }     
        [J("winner", NullValueHandling = N.Ignore)] public Winner? Winner { get; set; }    
    }

    public enum Level { State };

    public enum Winner { X };

    public partial class DataSummary
    {
        public static DataSummary FromJson(string json) => JsonConvert.DeserializeObject<DataSummary>(json, ElectionDiffMonitor2020.Model.DataSummaryConverter.Settings);
    }

    public static class SerializeDataSummary
    {
        public static string ToJson(this DataSummary self) => JsonConvert.SerializeObject(self, ElectionDiffMonitor2020.Model.DataSummaryConverter.Settings);
    }

    internal static class DataSummaryConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                LevelConverter.Singleton,
                WinnerConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class LevelConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Level) || t == typeof(Level?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "state")
            {
                return Level.State;
            }
            throw new Exception("Cannot unmarshal type Level");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Level)untypedValue;
            if (value == Level.State)
            {
                serializer.Serialize(writer, "state");
                return;
            }
            throw new Exception("Cannot marshal type Level");
        }

        public static readonly LevelConverter Singleton = new LevelConverter();
    }

    internal class WinnerConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Winner) || t == typeof(Winner?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "X")
            {
                return Winner.X;
            }
            throw new Exception("Cannot unmarshal type Winner");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Winner)untypedValue;
            if (value == Winner.X)
            {
                serializer.Serialize(writer, "X");
                return;
            }
            throw new Exception("Cannot marshal type Winner");
        }

        public static readonly WinnerConverter Singleton = new WinnerConverter();
    }
}
