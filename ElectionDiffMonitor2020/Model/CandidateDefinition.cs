// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ElectionDiffMonitor2020.Model;
//
//    var candidateDefinition = CandidateDefinition.FromJson(jsonString);

namespace ElectionDiffMonitor2020.Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class CandidateDefinition
    {
        [J("candidates")] public Dictionary<string, Candidate> Candidates { get; set; }
        [J("races")]      public Dictionary<string, Race> Races { get; set; }          
    }

    public partial class Candidate
    {
        [J("candidateID")]                                         public string CandidateId { get; set; }
        [J("fullName")]                                            public string FullName { get; set; }   
        [J("first")]                                               public string First { get; set; }      
        [J("last")]                                                public string Last { get; set; }       
        [J("party")]                                               public string Party { get; set; }      
        [J("polID")][JsonConverter(typeof(ParseStringConverter))]  public long PolId { get; set; }        
        [J("polNum")][JsonConverter(typeof(ParseStringConverter))] public long PolNum { get; set; }       
        [J("incumbent", NullValueHandling = N.Ignore)]             public bool? Incumbent { get; set; }   
    }

    public partial class Race
    {
        [J("date")]                                                public DateTimeOffset Date { get; set; }      
        [J("timestamp")]                                           public DateTimeOffset Timestamp { get; set; } 
        [J("test")]                                                public bool Test { get; set; }                
        [J("raceID")][JsonConverter(typeof(ParseStringConverter))] public long RaceId { get; set; }              
        [J("officeID")]                                            public OfficeId OfficeId { get; set; }        
        [J("officeName")]                                          public OfficeName OfficeName { get; set; }    
        [J("normOfficeName")]                                      public OfficeName NormOfficeName { get; set; }
        [J("raceTypeID")]                                          public RaceTypeId RaceTypeId { get; set; }    
        [J("raceTypeName")]                                        public RaceTypeName RaceTypeName { get; set; }
        [J("party")]                                               public Party Party { get; set; }              
        [J("candidates")]                                          public List<string> Candidates { get; set; }  
    }

    public enum OfficeName { President };

    public enum OfficeId { P };

    public enum Party { Opn };

    public enum RaceTypeId { G };

    public enum RaceTypeName { General };

    public partial class CandidateDefinition
    {
        public static CandidateDefinition FromJson(string json) => JsonConvert.DeserializeObject<CandidateDefinition>(json, ElectionDiffMonitor2020.Model.DataSummaryConverter.Settings);
    }

    public static class SerializeCandidate
    {
        public static string ToJson(this CandidateDefinition self) => JsonConvert.SerializeObject(self, ElectionDiffMonitor2020.Model.DataSummaryConverter.Settings);
    }

    internal static class CandidateDefinitionConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                OfficeNameConverter.Singleton,
                OfficeIdConverter.Singleton,
                PartyConverter.Singleton,
                RaceTypeIdConverter.Singleton,
                RaceTypeNameConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class OfficeNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OfficeName) || t == typeof(OfficeName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "president")
            {
                return OfficeName.President;
            }
            throw new Exception("Cannot unmarshal type OfficeName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (OfficeName)untypedValue;
            if (value == OfficeName.President)
            {
                serializer.Serialize(writer, "president");
                return;
            }
            throw new Exception("Cannot marshal type OfficeName");
        }

        public static readonly OfficeNameConverter Singleton = new OfficeNameConverter();
    }

    internal class OfficeIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OfficeId) || t == typeof(OfficeId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "P")
            {
                return OfficeId.P;
            }
            throw new Exception("Cannot unmarshal type OfficeId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (OfficeId)untypedValue;
            if (value == OfficeId.P)
            {
                serializer.Serialize(writer, "P");
                return;
            }
            throw new Exception("Cannot marshal type OfficeId");
        }

        public static readonly OfficeIdConverter Singleton = new OfficeIdConverter();
    }

    internal class PartyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Party) || t == typeof(Party?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Opn")
            {
                return Party.Opn;
            }
            throw new Exception("Cannot unmarshal type Party");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Party)untypedValue;
            if (value == Party.Opn)
            {
                serializer.Serialize(writer, "Opn");
                return;
            }
            throw new Exception("Cannot marshal type Party");
        }

        public static readonly PartyConverter Singleton = new PartyConverter();
    }

    internal class RaceTypeIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RaceTypeId) || t == typeof(RaceTypeId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "G")
            {
                return RaceTypeId.G;
            }
            throw new Exception("Cannot unmarshal type RaceTypeId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RaceTypeId)untypedValue;
            if (value == RaceTypeId.G)
            {
                serializer.Serialize(writer, "G");
                return;
            }
            throw new Exception("Cannot marshal type RaceTypeId");
        }

        public static readonly RaceTypeIdConverter Singleton = new RaceTypeIdConverter();
    }

    internal class RaceTypeNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RaceTypeName) || t == typeof(RaceTypeName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "general")
            {
                return RaceTypeName.General;
            }
            throw new Exception("Cannot unmarshal type RaceTypeName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RaceTypeName)untypedValue;
            if (value == RaceTypeName.General)
            {
                serializer.Serialize(writer, "general");
                return;
            }
            throw new Exception("Cannot marshal type RaceTypeName");
        }

        public static readonly RaceTypeNameConverter Singleton = new RaceTypeNameConverter();
    }
}
