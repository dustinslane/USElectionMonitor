// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ElectionDiffMonitor2020.Model;
//
//    var configuration = Configuration.FromJson(jsonString);

namespace ElectionDiffMonitor2020.Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class Configuration
    {
        [J("ImportantStates")]          public List<string> ImportantStates { get; set; }         
        [J("ResultsEndpoint")]          public Uri ResultsEndpoint { get; set; }                  
        [J("ManifestEndpoint")]         public Uri ManifestEndpoint { get; set; }                 
        [J("FilterPresidentLastNames")] public List<string> FilterPresidentLastNames { get; set; }
    }

    public partial class Configuration
    {
        public static Configuration FromJson(string json) => JsonConvert.DeserializeObject<Configuration>(json, ElectionDiffMonitor2020.Model.ConfigConverter.Settings);
    }

    public static class SerializeConfiguration
    {
        public static string ToJson(this Configuration self) => JsonConvert.SerializeObject(self, ElectionDiffMonitor2020.Model.ConfigConverter.Settings);
    }

    internal static class ConfigConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}